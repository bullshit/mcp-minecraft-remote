name: Publish Container with Buildpacks

on:
  push:
    branches: [main, develop]
    tags:
      - "[0-9]+.[0-9]+.[0-9]+" # 1.0.0
      - "[0-9]+.[0-9]+.[0-9]+-*" # 1.0.0-alpha, 1.0.0-beta.1
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-tests:
    name: Check Test Results
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      tests-passed: ${{ steps.check.outputs.tests-passed }}

    steps:
      - name: Check test workflow result
        id: check
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "tests-passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests passed, proceeding with publish"
          else
            echo "tests-passed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Tests failed, skipping publish"
            exit 1
          fi

  publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: check-tests
    if: |
      always() && (
        github.event_name == 'push' ||
        (github.event_name == 'workflow_run' && needs.check-tests.outputs.tests-passed == 'true')
      )
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: Setup Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.7.2

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}

      - name: Build with buildpacks
        run: |
          SHA="${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}"
          pack build ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHA:0:7} \
            --builder paketobuildpacks/builder-jammy-base \
            --env NODE_ENV=production \

      - name: Push base image
        run: |
          SHA="${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}"
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHA:0:7}

      - name: Tag additional versions via Registry API
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SHA="${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}"
          BASE_TAG="${SHA:0:7}"
          REPO_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')

          # Get the manifest for the base image
          echo "Getting manifest for base image..."
          MANIFEST=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.oci.image.manifest.v1+json" \
            "https://ghcr.io/v2/${REPO_LOWER}/manifests/${BASE_TAG}")

          if [ -z "$MANIFEST" ] || [ "$MANIFEST" = "null" ]; then
            echo "‚ùå Failed to get manifest for base image"
            exit 1
          fi

          echo "üì¶ Base manifest retrieved successfully"

          # Apply each tag by uploading the same manifest
          echo "$TAGS" | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              # Extract just the tag part after the last colon
              TAG_NAME=$(echo "$tag" | sed 's/.*://')
              
              # Skip if it's the same as our base tag
              if [ "$TAG_NAME" = "$BASE_TAG" ]; then
                echo "‚è≠Ô∏è  Skipping base tag: $TAG_NAME"
                continue
              fi
              
              echo "üè∑Ô∏è  Creating tag: $TAG_NAME"
              
              RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null \
                -X PUT \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Content-Type: application/vnd.oci.image.manifest.v1+json" \
                -d "$MANIFEST" \
                "https://ghcr.io/v2/${REPO_LOWER}/manifests/${TAG_NAME}")
              
              if [ "$RESPONSE" = "201" ] || [ "$RESPONSE" = "200" ]; then
                echo "‚úÖ Successfully tagged: $TAG_NAME"
              else
                echo "‚ùå Failed to tag $TAG_NAME (HTTP $RESPONSE)"
              fi
            fi
          done

          echo ""
          echo "üéâ Registry API tagging complete!"

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

      - name: Show published tags
        run: |
          echo "üéâ Successfully published container!"
          echo ""
          echo "üì¶ Available at:"
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "  - $tag"
            fi
          done
          echo ""
          if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_NAME="${{ github.ref_name }}"
            echo "üè∑Ô∏è Release: $TAG_NAME"
            echo "üê≥ Docker pull: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG_NAME"
          fi
